service: resource-functions

plugins:
  - serverless-offline
  - serverless-plugin-split-stacks

custom:
  stage: ${opt:stage, 'dev'}
  layer: 
    stack: ${file(../env.yml):layer.stack}
    name:
      libs: ${file(../env.yml):layer.name.libs}
      nodejs: ${file(../env.yml):layer.name.nodejs}
  region: ${file(../env.yml):region}
  splitStacks:
    perFunction: false
    perType: false
    perGroupFunction: false

provider:
  name: aws
  runtime: nodejs10.x
  stage: ${self:custom.stage}
  region: ap-northeast-2

  apiGateway:
    restApiId:
      'Fn::ImportValue': ${self:custom.stage}-sns-crawler-ApiGatewayRestApiId
    restApiRootResourceId:
      'Fn::ImportValue': ${self:custom.stage}-sns-crawler-ApiGatewayRestApiRootResourceId

  iamRoleStatements:
    - Effect: Allow
      Action:
        - lambda:InvokeFunction
      Resource: "*"

  environment:
    DB_HOST: ${ssm:/${self:custom.stage}/crawlerdb/host~true}
    DB_USER: ${ssm:/${self:custom.stage}/crawlerdb/user~true}
    DB_PASSWORD: ${ssm:/${self:custom.stage}/crawlerdb/password~true}
    DB_DATABASE: ${ssm:/${self:custom.stage}/crawlerdb/database~true}

package:
  exclude:
    - node_modules/**
    - .gitignore
    - README.md
    - yarn.lock
    - package-lock.json

functions:
  - ${file(./resources/function-scheduler.yml)}